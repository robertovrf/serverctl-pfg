const char debugMSG[]	  = "[@Distributor]"

const char HELP[]       = "help"
const char CREATE[]     = "create"
const char ALTERNATE[]  = "alternate"
const char PROPAGATE[]  = "propagate"
const char SHARDING[]   = "sharding"
const char LOCAL[]      = "local"
const char PERCEPTION[] = "perception"
const char PODS[]       = "pods"
const char TEST[]		    = "test"
const char EXIT[]       = "exit"


component 
  provides
    App
  requires 
    io.Output out,
    data.StringUtil strUtil,
    data.IntUtil iu,
    io.Input in, 
    monitoring.Perception,
    data.json.JSONEncoder encoder,
    data.DecUtil du,
    time.Timer t,
    serverctl.Serverctl SCTL 
{
  String remoteConfigs[]      = null
  String localConfigs[]       = null
  String distributedProxies[] = null
  Perception perception       = null
  bool islocal                = true

  void help() {
    out.println("Command list:")
    out.println(" $(HELP) - to list all commands")
    out.println(" $(CREATE) - to create pods")
    out.println(" $(ALTERNATE) - to distribute list alternating requests between replicas")
    out.println(" $(PROPAGATE) - to distribute list propagating write requests to all replicas")
    out.println(" $(SHARDING) - to distribute list with sharding")
    out.println(" $(LOCAL) - to bring list locally")
    out.println(" $(PERCEPTION) - to get perception data from the current running composition")
    out.println(" $(EXIT) - to finish execution")
  }

  void local() {
    islocal = true
    perception.setConfig(localConfigs[0].string) 
    out.println("$(debugMSG) Local composition running.")
    SCTL.delete_pods()
  }

  void distribute(char proxyInterface[]) {
    if ( !islocal ){
        local()
        distribute(proxyInterface)
        return 
    }

    out.print("Number of pods: \n")
    char quantity[] = in.readln()
    SCTL.create_pods(iu.intFromString(quantity))
    t.sleep(9000) // Temp solution
    out.println("$(iu.intFromString(quantity)) pods were created")

    char remoteConfig[] = getRemoteConfig("data/adt/$(proxyInterface)")
    if (remoteConfig != null) {	
      perception.setConfig(remoteConfig)
      out.println("$(debugMSG) Remote composition [($proxyInterface)] running.")	
    } else {
      throw new Exception("Something went wrong! Couldn't find remote proxy.")
    }
    
    islocal = false
  }

  void perception() {
    //char jsonPD[] = perception.getPerceptionData()
    //out.println("$(debugMSG) $(jsonPD)")
    PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
    for (int i = 0; i < pD.arrayLength; i++) {
      for (int cMetrics = 0; cMetrics < pD[i].metrics.arrayLength; cMetrics++) {
        dec value = pD[i].metrics[cMetrics].value
        dec counter = pD[i].metrics[cMetrics].counter
        dec avgRT = value/counter
        out.println("$(debugMSG) Avg response time: $(du.decToString(avgRT))")
      }
      for (int cEvents = 0; cEvents < pD[i].events.arrayLength; cEvents++) {
        out.println("$(debugMSG) Request type: $(pD[i].events[cEvents].type) - $(pD[i].events[cEvents].counter) ")
      }
    }
  }

  dec getAvgResponseTime() {
    PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
    dec result = 0.0
    
    if ((pD != null) && (pD[0].metrics.arrayLength > 0)) {
      dec value = pD[0].metrics[0].value
      dec counter = pD[0].metrics[0].value
      result = value/counter
    }

    return result
  }

  void observationLoop(int numCycles, int observationWindow) {
    getAvgResponseTime()
    for (int i = 0; i < numCycles; i++) {
      t.sleep(observationWindow)
      out.println("$(debugMSG) $(du.decToString(getAvgResponseTime()))")
    }
  }

	void commandInterpret(char cmd[]) {
		String cmdList[] = strUtil.explode(cmd, " ")
    if (cmdList.arrayLength == 1) {
      if (cmd == HELP) {
        help()
      } else if (cmd == SHARDING) {
        distribute("ListCPSharding.o")
      } else if (cmd == LOCAL) {
        local()
      } else if (cmd == PERCEPTION) {
        perception()
      } else if (cmd == TEST) {
        out.println("$(debugMSG) Starting test...")
        local()
        observationLoop(10, 1000)
        distribute("ListCPPropagate.o")
        observationLoop(10, 1000)
        distribute("ListCPAlternate.o")
        observationLoop(10, 1000)
        distribute("ListCPSharding.o")
        observationLoop(10, 1000)
        out.println("$(debugMSG) Test finished!")
      } else if (cmd == PODS) {
        SCTL.get_service_names()
      } else {
        out.println("Invalid command.")
      }
		}
	}

  char[] getRemoteConfig(char proxy[]) {
    for (int pointer = 0; pointer < remoteConfigs.arrayLength; pointer++) {
      if (strUtil.find(remoteConfigs[pointer].string, proxy) != StringUtil.NOT_FOUND) {
        return remoteConfigs[pointer].string
      }
    }
    return null
  }

  // Guess there's a better way of doing this...
  void remoteLocalSeparation() {
    if ((remoteConfigs == null) || (localConfigs == null)) {
      out.println("$(debugMSG) Separating local and remote compositions...")
      String configs[] = perception.getAllConfigs()
      for (int confPointer = 0; confPointer < configs.arrayLength; confPointer++) {
        bool remote = false
        for (int distProxy = 0; distProxy < distributedProxies.arrayLength; distProxy++) {
          if (strUtil.find(configs[confPointer].string, distributedProxies[distProxy].string) 
            != StringUtil.NOT_FOUND) {
            remoteConfigs = new String[](remoteConfigs, configs[confPointer])
            remote = true
            break
          }
        }
        if (!remote) {
          localConfigs = new String[](localConfigs, configs[confPointer])
        }
      }
    }
  }

  // TODO: dynamically load the names of distributed proxies from the folder distributor/data/adt/
  // currently hard-coded 
  void loadDistributedProxies() {
    if (distributedProxies == null) {
      distributedProxies = new String[](
        new String("ListCPPropagate.o"),
        new String("ListCPAlternate.o"),
        new String("ListCPSharding.o"))
    }
  }

  int App:main(AppParam params[]) {
    perception = new Perception(true)
    /* Loading target system and adding a monitoring proxy to it */
    perception.setMain("../server/main.o", null)
    perception.addProxy("|../distributor/monitoring/proxies/ServerProxy.o|*(*:server.Server[0]:*)|")
    
        String configs[] = perception.getAllConfigs()
    for (int i = 0; i < configs.arrayLength; i++) {
      out.println("$(debugMSG) $(iu.intToString(i+1)): $(configs[i].string)")
    }
    loadDistributedProxies()
    remoteLocalSeparation()
    local()
    /* command prompt */
    char cmd[] = "start"
    while (cmd != "exit") {
      if (cmd != "start") { commandInterpret(cmd)	}
      out.print("distributor> ")
      cmd = in.readln()
    }
    SCTL.delete_pods()
    return 0
  }
}